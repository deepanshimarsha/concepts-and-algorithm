1. Dynamic Programming - it is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and 
   stores the results of subproblems to avoid computing the same results again.

2. property of Dynamic programming:
    1) Overlapping Subproblems -  In dynamic programming, computed solutions to subproblems are stored in a table 
                                  so that these don’t have to be recomputed. So Dynamic Programming is not useful 
                                  when there are no common (overlapping) subproblems because there is no point storing 
                                  the solutions if they are not needed again. For example, Binary Search doesn’t have common 
                                  subproblems. If we take an example of following recursive program for Fibonacci Numbers, 
                                  there are many subproblems that are solved again and again.
        
            There are following two different ways to store the values so that these values can be reused: 
            a) Memoization (Top Down) 
            b) Tabulation (Bottom Up)

            *In Memoized version, table is filled on demand while in the Tabulated version, starting from the first entry, 
            all entries are filled one by one. Unlike the Tabulated version, all entries of the lookup table are not necessarily 
            filled in Memoized version. For example, Memoized solution of the LCS problem doesn’t necessarily fill all entries.

    2) Optimal Substructure - A given problems has Optimal Substructure Property if optimal solution of the given problem can 
                              be obtained by using optimal solutions of its subproblems. 

               example - Shortest Path problem has optimal substructure property. On the other hand, the Longest 
                         Path problem doesn’t have the Optimal Substructure property.